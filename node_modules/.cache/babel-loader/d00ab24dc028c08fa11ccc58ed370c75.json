{"ast":null,"code":"import { GET_ALL_GATEGORY, ERROR, CREATE_CATEGORY } from \"../Type\";\nimport baseUrl from '../../Api/baseURL';\nimport useGetData from \"../../Hook/useGetData\";\nimport usePostDataWithImage from \"../../Hook/usePostData\";\nexport const getAllCategory = limit => async dispatch => {\n  try {\n    // get all category \n    const respons = await baseUrl.get(`/api/v1/categories?limit=${limit}`);\n    dispatch({\n      type: GET_ALL_GATEGORY,\n      payload: respons.data\n    });\n  } catch (e) {\n    dispatch({\n      type: ERROR,\n      payload: \"ERROR\" + e\n    });\n  }\n}; // get all category with paginaion\n\nexport const getAllCategoryPage = Page => async dispatch => {\n  try {\n    const respons = await baseUrl.get(`/api/v1/categories?limit=4&page=${Page}`);\n    dispatch({\n      type: GET_ALL_GATEGORY,\n      payload: respons.data\n    });\n  } catch (e) {\n    dispatch({\n      type: ERROR,\n      payload: \"ERROR\" + e\n    });\n  }\n}; // get all category with paginaion\n\nexport const createCategory = formData => {\n  var _s = $RefreshSig$();\n\n  return _s(async dispatch => {\n    _s();\n\n    const usePostDataWithImage = async (URL, params) => {\n      const config = {\n        headers: (\"content-type\", \"multipart/form-data\")\n      };\n      const res = await baseUrl.Post(URL, params, config);\n      return res.data;\n    };\n\n    try {\n      const respons = await usePostDataWithImage(`/api/v1/categories`, formData);\n      dispatch({\n        type: CREATE_CATEGORY,\n        payload: respons.data,\n        loading: true\n      });\n    } catch (e) {\n      dispatch({\n        type: ERROR,\n        payload: \"ERROR\" + e\n      });\n    }\n  }, \"wOptpPmF+pMpYX2ibD+3oVCekdA=\", false, function () {\n    return [usePostDataWithImage];\n  });\n};","map":{"version":3,"names":["GET_ALL_GATEGORY","ERROR","CREATE_CATEGORY","baseUrl","useGetData","usePostDataWithImage","getAllCategory","limit","dispatch","respons","get","type","payload","data","e","getAllCategoryPage","Page","createCategory","formData","URL","params","config","headers","res","Post","loading"],"sources":["C:/Users/hp-Moon/Desktop/react-product-4/react-pro/src/Redux/actions/CategoryAction.js"],"sourcesContent":["import { GET_ALL_GATEGORY, ERROR,CREATE_CATEGORY  } from \"../Type\";\r\nimport baseUrl from '../../Api/baseURL';\r\nimport useGetData from \"../../Hook/useGetData\";\r\nimport usePostDataWithImage from \"../../Hook/usePostData\"\r\nexport const getAllCategory = (limit) => async (dispatch) => {\r\n    try {\r\n\r\n        // get all category \r\n        const respons = await baseUrl.get(`/api/v1/categories?limit=${limit}`)\r\n        dispatch({\r\n            type: GET_ALL_GATEGORY,\r\n            payload: respons.data,\r\n        })\r\n\r\n    } catch (e) {\r\n        dispatch({\r\n            type: ERROR,\r\n            payload: \"ERROR\" + e,\r\n        })\r\n    }\r\n}\r\n\r\n\r\n// get all category with paginaion\r\nexport const getAllCategoryPage = (Page) => async (dispatch) => {\r\n    try {\r\n\r\n        const respons = await baseUrl.get(`/api/v1/categories?limit=4&page=${Page}`)\r\n        dispatch({\r\n            type: GET_ALL_GATEGORY,\r\n            payload: respons.data,\r\n        })\r\n\r\n    } catch (e) {\r\n        dispatch({\r\n            type: ERROR,\r\n            payload: \"ERROR\" + e,\r\n        })\r\n    }\r\n}\r\n\r\n\r\n// get all category with paginaion\r\nexport const createCategory = (formData) => async (dispatch) => {\r\n    \r\n    const usePostDataWithImage = async (URL, params) => {\r\n        const config = {\r\n            headers: (\"content-type\", \"multipart/form-data\")\r\n        }\r\n        const res = await baseUrl.Post(URL, params, config)\r\n        return res.data;\r\n    }\r\n    \r\n\r\n    \r\n    try {\r\n\r\n        const respons = await usePostDataWithImage(`/api/v1/categories`,formData)\r\n        dispatch({\r\n            type: CREATE_CATEGORY,\r\n            payload: respons.data,\r\n            loading:true,\r\n        })\r\n\r\n    } catch (e) {\r\n        dispatch({\r\n            type: ERROR,\r\n            payload: \"ERROR\" + e,\r\n        })\r\n    }\r\n}"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,KAA3B,EAAiCC,eAAjC,QAAyD,SAAzD;AACA,OAAOC,OAAP,MAAoB,mBAApB;AACA,OAAOC,UAAP,MAAuB,uBAAvB;AACA,OAAOC,oBAAP,MAAiC,wBAAjC;AACA,OAAO,MAAMC,cAAc,GAAIC,KAAD,IAAW,MAAOC,QAAP,IAAoB;EACzD,IAAI;IAEA;IACA,MAAMC,OAAO,GAAG,MAAMN,OAAO,CAACO,GAAR,CAAa,4BAA2BH,KAAM,EAA9C,CAAtB;IACAC,QAAQ,CAAC;MACLG,IAAI,EAAEX,gBADD;MAELY,OAAO,EAAEH,OAAO,CAACI;IAFZ,CAAD,CAAR;EAKH,CATD,CASE,OAAOC,CAAP,EAAU;IACRN,QAAQ,CAAC;MACLG,IAAI,EAAEV,KADD;MAELW,OAAO,EAAE,UAAUE;IAFd,CAAD,CAAR;EAIH;AACJ,CAhBM,C,CAmBP;;AACA,OAAO,MAAMC,kBAAkB,GAAIC,IAAD,IAAU,MAAOR,QAAP,IAAoB;EAC5D,IAAI;IAEA,MAAMC,OAAO,GAAG,MAAMN,OAAO,CAACO,GAAR,CAAa,mCAAkCM,IAAK,EAApD,CAAtB;IACAR,QAAQ,CAAC;MACLG,IAAI,EAAEX,gBADD;MAELY,OAAO,EAAEH,OAAO,CAACI;IAFZ,CAAD,CAAR;EAKH,CARD,CAQE,OAAOC,CAAP,EAAU;IACRN,QAAQ,CAAC;MACLG,IAAI,EAAEV,KADD;MAELW,OAAO,EAAE,UAAUE;IAFd,CAAD,CAAR;EAIH;AACJ,CAfM,C,CAkBP;;AACA,OAAO,MAAMG,cAAc,GAAIC,QAAD;EAAA;;EAAA,UAAc,MAAOV,QAAP,IAAoB;IAAA;;IAE5D,MAAMH,oBAAoB,GAAG,OAAOc,GAAP,EAAYC,MAAZ,KAAuB;MAChD,MAAMC,MAAM,GAAG;QACXC,OAAO,GAAG,gBAAgB,qBAAnB;MADI,CAAf;MAGA,MAAMC,GAAG,GAAG,MAAMpB,OAAO,CAACqB,IAAR,CAAaL,GAAb,EAAkBC,MAAlB,EAA0BC,MAA1B,CAAlB;MACA,OAAOE,GAAG,CAACV,IAAX;IACH,CAND;;IAUA,IAAI;MAEA,MAAMJ,OAAO,GAAG,MAAMJ,oBAAoB,CAAE,oBAAF,EAAsBa,QAAtB,CAA1C;MACAV,QAAQ,CAAC;QACLG,IAAI,EAAET,eADD;QAELU,OAAO,EAAEH,OAAO,CAACI,IAFZ;QAGLY,OAAO,EAAC;MAHH,CAAD,CAAR;IAMH,CATD,CASE,OAAOX,CAAP,EAAU;MACRN,QAAQ,CAAC;QACLG,IAAI,EAAEV,KADD;QAELW,OAAO,EAAE,UAAUE;MAFd,CAAD,CAAR;IAIH;EACJ,CA3B6B;IAAA,QAcAT,oBAdA;EAAA;AAAA,CAAvB"},"metadata":{},"sourceType":"module"}